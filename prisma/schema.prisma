// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String             @id @default(nanoid(7))
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  businesses       Business[]
  posts            Post[]
  reviews          Review[]
  UserViewBusiness UserViewBusiness[]
  isAdmin          Boolean?           @default(false)
  PageEvent        PageEvent[]
  cart             Json?
  Order            Order[]
  deliveryAddress  String?
  deliveryPhone    String?
  Staff            Staff[]
  PostReport       PostReport[]

  canWriteNews    Boolean?          @default(false)
  PostEvent       PostEvent[]
  BusinessVoucher BusinessVoucher[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id                   String               @id @default(nanoid(8))
  slug                 String?              @unique
  createdAt            DateTime             @unique @default(now())
  updatedAt            DateTime             @unique @default(now())
  user                 User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId               String?
  title                String?
  content              Json?
  thumbnail            String?
  images               Json?                @default("[]")
  published            Boolean?
  expiredTime          DateTime?
  googleMapsUrl        String?
  googleMapsUrlEmbeded String?
  contactPhone         String?
  postType             PostType?            @default(NORMAL)
  sellingProductType   SellingProductType?  @relation(fields: [sellingProductTypeId], references: [id])
  rank                 Int?                 @default(0)
  keywords             String?
  sellingProductTypeId String?
  // ----
  salary               String?
  price                BigInt?
  jobType              JobType?
  jobGenderType        JobGenderType?
  realEstateType       RealEstateType?
  realEstateAssetType  RealEstateAssetType?
  NewsCollection       NewsCollection?      @relation(fields: [newsCollectionId], references: [id])
  newsCollectionId     String?
  visible              Boolean?             @default(true)
  PostEvent            PostEvent[]

  @@index([title])
  @@index([slug])
  @@index([userId])
}

model Invite {
  id         String   @id @default(nanoid(7))
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  email      String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
  accepted   Boolean? @default(false)

  @@unique([email, businessId])
  @@index([email])
}

model Staff {
  id         String   @id @default(nanoid(7))
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, businessId])
}

model Collection {
  id       String     @id @default(cuid())
  slug     String     @unique
  title    String
  Business Business[]

  @@unique([title, slug])
  @@index([slug])
}

model Business {
  id                String       @id @default(nanoid(7))
  createdAt         DateTime     @unique @default(now())
  updatedAt         DateTime     @unique @default(now())
  title             String       @unique
  slug              String       @unique
  logo              String?
  owner             User?        @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId           String?
  inCollections     Collection[]
  images            Json?
  menuImages        Json?
  displayMenuImages Boolean?
  description       String?
  banner            Json?
  displayBanner     Boolean?
  avgRating         Float?
  verified          Boolean?
  rank              Int?         @default(0)

  tags        Tag[]
  MasterTag   MasterTag? @relation(fields: [masterTagId], references: [id])
  masterTagId String?

  // contact information
  phone                String?
  website              String?
  facebookUrl          String?
  googleMapsUrl        String?
  googleMapsUrlEmbeded String? @db.Text
  address              String?

  displayContact Boolean? @default(false)

  // working hours
  monStartHr String?
  monEndHr   String?
  tueStartHr String?
  tueEndHr   String?
  wedStartHr String?
  wedEndHr   String?
  thuStartHr String?
  thuEndHr   String?
  friStartHr String?
  friEndHr   String?
  satStartHr String?
  satEndHr   String?
  sunStartHr String?
  sunEndHr   String?
  amenities  Amenity[]

  workingHrs Json?

  published Boolean @default(false)

  // 
  UserViewBusiness UserViewBusiness[]
  Review           Review[]
  Product          Product[]
  BusinessPost     BusinessPost[]
  PageEvent        PageEvent[]
  Order            Order[]
  Invite           Invite[]
  Staff            Staff[]
  BusinessVoucher  BusinessVoucher[]

  @@index([slug])
  @@index([ownerId])
  @@index([masterTagId])
}

model Review {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  business   Business? @relation(fields: [businessId], references: [id])
  businessId String?
  rating     Int
  content    String?   @db.Text
  images     Json?

  userLikes    Json? @default("[]")
  userDislikes Json? @default("[]")

  @@index([userId])
  @@index([businessId])
  @@index([userId, businessId])
}

model Tag {
  id   String @id @default(nanoid(4))
  name String @unique
  slug String @unique

  MasterTag   MasterTag? @relation(fields: [masterTagId], references: [id])
  masterTagId String?
  business    Business[]

  @@index([masterTagId])
  @@index([slug])
}

model MasterTag {
  id       String     @id @default(nanoid(4))
  name     String     @unique
  slug     String     @unique
  tags     Tag[]
  Business Business[]
  url      String?
}

model UserViewBusiness {
  id         String                  @id @default(cuid())
  user       User                    @relation(fields: [userId], references: [id])
  business   Business                @relation(fields: [businessId], references: [id])
  createdAt  DateTime                @unique @default(now())
  context    UserViewBusinessContext
  userId     String
  businessId String

  @@index([userId])
  @@index([businessId])
}

model Product {
  id          String      @id @default(nanoid(7))
  name        String
  description String?
  createdAt   DateTime    @unique @default(now())
  images      Json?
  business    Business?   @relation(fields: [businessId], references: [id])
  businessId  String?
  minPrice    Int?
  maxPrice    Int?
  price       Int?
  visible     Boolean?    @default(true)
  orderable   Boolean?
  OrderItem   OrderItem[]

  @@index([businessId])
}

model Amenity {
  id         String    @id @default(nanoid(7))
  name       String    @unique
  slug       String    @unique
  business   Business? @relation(fields: [businessId], references: [id])
  businessId String?

  @@index([businessId])
}

model BusinessPost {
  id         String    @id @default(cuid())
  createdAt  DateTime  @unique @default(now())
  updatedAt  DateTime  @unique @default(now())
  business   Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId String?
  slug       String    @unique
  title      String
  content    Json?
  images     Json
  published  Boolean

  @@unique([title, slug])
  @@index([slug])
  @@index([businessId])
}

model PageEvent {
  id          Int       @id @default(autoincrement())
  eventType   EventType
  timestamp   DateTime  @default(now()) @db.Date
  tzTimestamp DateTime?
  ipAddress   String?
  userAgent   Json?
  geo         Json?
  referer     String? // Referring URL or other reference info
  business    Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  businessId  String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?

  @@index([userId])
  @@index([businessId])
}

enum EventType {
  PAGE_VIEW
  SEARCH_VIEW
  BUTTON_CLICK
  FORM_SUBMIT
  LINK_CLICK
}

model PostEvent {
  id          Int       @id @default(autoincrement())
  eventType   EventType
  timestamp   DateTime  @default(now()) @db.Date
  tzTimestamp DateTime?
  ipAddress   String?
  userAgent   Json?
  geo         Json?
  referer     String? // Referring URL or other reference info
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?

  @@index([postId])
}

enum OrderStatus {
  REQUESTED
  DONE
  CANCELLED
}

enum PostType {
  NORMAL
  NEWS
  SELLING
  JOB
  REALESTATE
}

enum JobType {
  FULLTIME
  PARTTIME
  REMOTE
  CONTRACT
  OTHER
}

enum JobGenderType {
  MALE
  FEMALE
}

enum RealEstateType {
  RENT
  SELL
}

enum RealEstateAssetType {
  APARTMENT
  HOME
  OFFICE
  LAND
  FLAT
}

enum UserViewBusinessContext {
  page
  photo
  contact
  ad
}

model OrderItem {
  id        String   @id @default(nanoid(10))
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Int?
  // Additional fields related to order details and status
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?

  @@index([productId])
}

model Order {
  id        String      @id @default(nanoid(10))
  createdAt DateTime    @unique @default(now())
  items     OrderItem[]
  // Additional fields related to order details and status

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  deliveryAddress String
  deliveryPhone   String

  timestamp   DateTime     @default(now())
  tzTimestamp DateTime?
  status      OrderStatus? @default(REQUESTED)

  @@index([userId])
  @@index([businessId])
}

model SellingProductType {
  id    String  @id @default(nanoid(10))
  title String
  url   String?
  Post  Post[]
}

model PostReport {
  id     String  @id @default(nanoid(10))
  title  String
  post   User?   @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId String?
  phone  String
}

model NewsCollection {
  id    String @id @default(nanoid(10))
  posts Post[]

  @@index([id])
}

model EventQuestion {
  id             String            @id @default(nanoid(10))
  title          String
  image          Json?
  description    String?
  multiChoice    Boolean           @default(false)
  questions      Json?
  answerText     String?
  answerTextSlug String?
  date           String
  time           String
  tzDatetime     DateTime          @default(now())
  availableHrs   Int               @default(24)
  vouchers       BusinessVoucher[]
}

model BusinessVoucher {
  id              String         @id @default(nanoid(10))
  code            String
  createdAt       DateTime       @default(now())
  description     String?
  availableFrom   DateTime       @default(now())
  availableTo     DateTime
  business        Business       @relation(fields: [businessId], references: [id])
  businessId      String
  isAvailable     Boolean?
  EventQuestion   EventQuestion? @relation(fields: [eventQuestionId], references: [id])
  eventQuestionId String?
  user            User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?

  @@unique([code, businessId])
  @@index([businessId])
}
